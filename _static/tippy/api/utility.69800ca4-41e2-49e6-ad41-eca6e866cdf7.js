selector_to_html = {"a[href=\"#read_plane\"]": "<dt class=\"sig sig-object mat\" id=\"read_plane\">\n<span class=\"sig-name descname\"><span class=\"pre\">read_plane</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">path</span></em>, <em class=\"sig-param\"><span class=\"pre\">ds</span></em>, <em class=\"sig-param\"><span class=\"pre\">varargin</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Read a specific plane from an HDF5 or MAT file and return the data. If\ninput is a MAT file, a matfile object is returned.</p><p class=\"rubric\">Notes</p><p>This function interactively prompts the user for input if any required\nparameter is not provided. It handles various errors and prompts the\nuser again for correct input.</p><p class=\"rubric\">Examples</p></dd>", "a[href=\"#write_frames_3d\"]": "<dt class=\"sig sig-object mat\" id=\"write_frames_3d\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_frames_3d</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">file</span></em>, <em class=\"sig-param\"><span class=\"pre\">Y_in</span></em>, <em class=\"sig-param\"><span class=\"pre\">ds</span></em>, <em class=\"sig-param\"><span class=\"pre\">append</span></em>, <em class=\"sig-param\"><span class=\"pre\">chunk_mb</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Write in-memory 3D or 4D data to an HDF5 file in chunks.</p><p>This function writes a multidimensional array <cite>Y_in</cite> to an HDF5 file specified\nby <cite>file</cite> in chunks. It creates a dataset within the HDF5 file and writes the\ndata in specified chunk sizes. If <cite>dataset_name</cite> is not provided, it defaults\nto \u2018/Y\u2019. If target_chunk_mb size is not provided, it defaults to 4MB.</p><p class=\"rubric\">Notes</p><p>This function trims the last frame of each chunk if the chunk size\nexceeds the remaining data size.</p><p class=\"rubric\">Examples</p><p>Write a 3D array to an HDF5 file with default chunk size and dataset name:</p></dd>", "a[href=\"#writers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">2.2. </span>Writers<a class=\"headerlink\" href=\"#writers\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#write_frames_to_gif\"]": "<dt class=\"sig sig-object mat\" id=\"write_frames_to_gif\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_frames_to_gif</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">array_3D</span></em>, <em class=\"sig-param\"><span class=\"pre\">gif_filename</span></em>, <em class=\"sig-param\"><span class=\"pre\">size_mb</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Create a GIF from a 3D array with a target size in MB.</p><p>This function converts a 3D array (height x width x frames) into a GIF\nfile with a specified maximum size in megabytes. The function normalizes\neach frame, converts it to grayscale, and writes it to the GIF file.</p><p class=\"rubric\">Notes</p><p>Frames are normalized to [0, 1] and converted to grayscale before being written to the GIF file.\nThis will result in the final image being smaller than the original, as will the resulting gif.</p><p class=\"rubric\">Examples</p></dd>", "a[href=\"#write_frames_2d\"]": "<dt class=\"sig sig-object mat\" id=\"write_frames_2d\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_frames_2d</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">filename</span></em>, <em class=\"sig-param\"><span class=\"pre\">data</span></em>, <em class=\"sig-param\"><span class=\"pre\">dataset_name</span></em>, <em class=\"sig-param\"><span class=\"pre\">overwrite</span></em>, <em class=\"sig-param\"><span class=\"pre\">append</span></em><span class=\"sig-paren\">)</span></dt><dd><p>get the size of the data</p></dd>", "a[href=\"#calculate_scale\"]": "<dt class=\"sig sig-object mat\" id=\"calculate_scale\">\n<span class=\"sig-name descname\"><span class=\"pre\">calculate_scale</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">img_size</span></em>, <em class=\"sig-param\"><span class=\"pre\">pixel_resolution</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Calculates the appropriate scale bar size from an image size and pixel resolution.</p></dd>", "a[href=\"#utility\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">2. </span>Utility<a class=\"headerlink\" href=\"#utility\" title=\"Permalink to this heading\">#</a></h1><p>Functions used by the pipeline that users can take advantage of to further process LBM datasets.</p>", "a[href=\"#translate_frames\"]": "<dt class=\"sig sig-object mat\" id=\"translate_frames\">\n<span class=\"sig-name descname\"><span class=\"pre\">translate_frames</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">Y</span></em>, <em class=\"sig-param\"><span class=\"pre\">shifts_2D</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Translate image frames based on provided translation vectors.</p><p>This function applies 2D translations to an image time series based on\na series of translation vectors, one per frame. Each frame is translated\nindependently, and the result is returned as a 3D stack of\n(Height x Width x num_frames) translated frames.</p></dd>", "a[href=\"#write_mean_images_to_png\"]": "<dt class=\"sig sig-object mat\" id=\"write_mean_images_to_png\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_mean_images_to_png</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">directory</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Create a grid of mean-images from HDF5 datasets in the specified directory.</p><p>This function reads HDF5 files from a specified directory, extracts the \u2018/Ym\u2019\ndataset (assumed to be a 2D image) from each file, and creates a 5x6 grid of\nthese images with no padding or tile spacing. The function processes up to\n30 HDF5 files in the directory.</p><p class=\"rubric\">Notes</p><p class=\"rubric\">Examples</p></dd>", "a[href=\"#get_metadata\"]": "<dt class=\"sig sig-object mat\" id=\"get_metadata\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_metadata</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">filename</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Extract metadata from a ScanImage TIFF file.</p><p>Read and parse Tiff metadata stored in the .tiff header\nand ScanImage metadata stored in the \u2018Artist\u2019 tag which contains roi sizes/locations and scanning configuration\ndetails in a JSON format.</p><p class=\"rubric\">Examples</p><p>metadata = get_metadata(\u201cpath/to/file.tif\u201d);</p></dd>", "a[href=\"#play_movie\"]": "<dt class=\"sig sig-object mat\" id=\"play_movie\">\n<span class=\"sig-name descname\"><span class=\"pre\">play_movie</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">movie_cell_array</span></em>, <em class=\"sig-param\"><span class=\"pre\">labels_cell_array</span></em>, <em class=\"sig-param\"><span class=\"pre\">min_mov</span></em>, <em class=\"sig-param\"><span class=\"pre\">max_mov</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Play a movie or list of movies with labels, press any key to stop  the movie from playing.</p><p class=\"rubric\">Examples</p><p>play_movie({movie1, movie2}, {\u2018Movie 1\u2019, \u2018Movie 2\u2019}, 0, 255)\nplay_movie(movie, \u2018Sample Movie\u2019)</p></dd>", "a[href=\"#get_central_indices\"]": "<dt class=\"sig sig-object mat\" id=\"get_central_indices\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_central_indices</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">img</span></em>, <em class=\"sig-param\"><span class=\"pre\">margin</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Returns the central indices of the image with a given margin.</p></dd>", "a[href=\"#display_dataset_names\"]": "<dt class=\"sig sig-object mat\" id=\"display_dataset_names\">\n<span class=\"sig-name descname\"><span class=\"pre\">display_dataset_names</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">h5_fullfile</span></em>, <em class=\"sig-param\"><span class=\"pre\">loc</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Display available datasets in an HDF5 file.</p><p>This function displays the names, sizes, and datatypes of datasets in the\nprovided group location in the dataset.</p></dd>", "a[href=\"#readers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">2.1. </span>Readers<a class=\"headerlink\" href=\"#readers\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#set_caxis\"]": "<dt class=\"sig sig-object mat\" id=\"set_caxis\">\n<span class=\"sig-name descname\"><span class=\"pre\">set_caxis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">stack</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Set the color axis limits for an image stack.</p><p>This function sets the color axis limits of the current figure based on\nthe cumulative distribution function (CDF) of pixel values in the first\nimage of the provided stack. The limits are set to the 0.5th and 99.5th\npercentiles to improve the contrast of the displayed images.</p></dd>", "a[href=\"#write_frames_to_tiff\"]": "<dt class=\"sig sig-object mat\" id=\"write_frames_to_tiff\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_frames_to_tiff</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">varargin</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Write image to TIFF file with specified datatype.</p><p class=\"rubric\">Notes</p><p>To avoid errors such as \u2018??? Error using ==&gt; tifflib The value for\nMaxSampleValue must be \u2026\u2019, override the tag MaxSampleValue with MATLAB\nsupported values or simply remove the tag from the header.</p><p>Overwriting of the existing image files is not checked. Be cautious\nwith the export image file name.</p><p class=\"rubric\">Examples</p><p>imgdata = imread(\u2018ngc6543a.jpg\u2019);\nheader  = imfinfo(\u2018ngc6543a.jpg\u2019);\nwrite_frames_to_tiff(imgdata,header,\u2019new_zplane_1.tif\u2019,\u2019uint16\u2019);</p></dd>", "a[href=\"#visualization\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">2.3. </span>Visualization<a class=\"headerlink\" href=\"#visualization\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#get_segmentation_metrics\"]": "<dt class=\"sig sig-object mat\" id=\"get_segmentation_metrics\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_segmentation_metrics</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">savePath</span></em>, <em class=\"sig-param\"><span class=\"pre\">T_all</span></em>, <em class=\"sig-param\"><span class=\"pre\">Nsamples</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Compute and save segmentation metrics based on the ration of t Z-Score of the moving mean\nto the standard deviation of the difference between time-series data and\nthe moving mean.</p><p class=\"rubric\">Notes</p><p>The Z-score is calculated as the ratio of the maximum moving mean to the\nstandard deviation of the difference between the time series data and its\nmoving mean.</p><p class=\"rubric\">Examples</p><p>savePath = \u2018results/\u2019;\nT_all = randn(100, 1000); % Example time series data\nNsamples = 10;\nget_segmentation_metrics(savePath, T_all, Nsamples);</p></dd>", "a[href=\"#validation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><span class=\"section-number\">2.4. </span>Validation<a class=\"headerlink\" href=\"#validation\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#write_images_to_gif\"]": "<dt class=\"sig sig-object mat\" id=\"write_images_to_gif\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_images_to_gif</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">image_files</span></em>, <em class=\"sig-param\"><span class=\"pre\">save_name</span></em>, <em class=\"sig-param\"><span class=\"pre\">delay_time</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Creates an animated GIF from a series of images <strong>on disk</strong>.</p><p>This function generates an animated GIF from a series of images specified\nby their file paths. The images are read, converted to indexed color, and\nsequentially written to a GIF file with a specified delay between frames.</p><p class=\"rubric\">Notes</p><p>The function reads each image file, converts it to an indexed color map, and writes\nit to the GIF file. The first image initializes the GIF file, and subsequent images\nare appended. If the delay_time parameter is not specified, it defaults to 0.5 seconds\nbetween frames. The function checks for valid input types and existence of image files\nbefore proceeding with the GIF creation.</p></dd>", "a[href=\"#write_frames_to_avi\"]": "<dt class=\"sig sig-object mat\" id=\"write_frames_to_avi\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_frames_to_avi</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">data</span></em>, <em class=\"sig-param\"><span class=\"pre\">filename</span></em>, <em class=\"sig-param\"><span class=\"pre\">frame_rate</span></em>, <em class=\"sig-param\"><span class=\"pre\">x</span></em>, <em class=\"sig-param\"><span class=\"pre\">y</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Write a 3D array to an AVI video file.</p><p>This function takes a 3D numeric array <cite>data</cite> and writes it to an AVI video\nfile specified by <cite>filename</cite>. The video is created with the specified frame\nrate and spatial dimensions <cite>x</cite> and <cite>y</cite>.</p><p class=\"rubric\">Notes</p><p>The function normalizes the data, applies a moving mean filter, and writes\nthe frames to an uncompressed AVI video file. It also sets up the figure\nproperties for visualization and adjusts the color axis limits.</p><p class=\"rubric\">Examples</p><p>Write a 3D array to an AVI file with default settings:</p></dd>", "a[href=\"#write_images_to_tile\"]": "<dt class=\"sig sig-object mat\" id=\"write_images_to_tile\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_images_to_tile</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">images</span></em>, <em class=\"sig-param\"><span class=\"pre\">metadata</span></em>, <em class=\"sig-param\"><span class=\"pre\">varargin</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Creates a tiled figure with scale bars and specified titles.</p></dd>", "a[href=\"#reorder_h5_files\"]": "<dt class=\"sig sig-object mat\" id=\"reorder_h5_files\">\n<span class=\"sig-name descname\"><span class=\"pre\">reorder_h5_files</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">h5path</span></em>, <em class=\"sig-param\"><span class=\"pre\">order</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Reorder and rename HDF5 files based on a specified order.</p><p>This function reorders and renames HDF5 files in a specified directory (<cite>h5path</cite>)\nbased on the provided <cite>order</cite> array. It temporarily renames files to avoid conflicts,\nupdates the HDF5 attributes to store the original order, and saves the original order\nas a .mat file.</p><p class=\"rubric\">Notes</p><p>The function ensures that the HDF5 files are sorted, renames them to temporary names\nto avoid conflicts, and then renames them to their new ordered names. The original\norder is stored as an attribute in each HDF5 file and saved as a .mat file.</p><p class=\"rubric\">Examples</p><p>Reorder HDF5 files in a directory based on a specified order:</p></dd>", "a[href=\"#validate_toolboxes\"]": "<dt class=\"sig sig-object mat\" id=\"validate_toolboxes\">\n<span class=\"sig-name descname\"><span class=\"pre\">validate_toolboxes</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span></dt><dd><p>Report missing MATLAB toolboxes that are required to execute this pipeline.</p></dd>", "a[href=\"#write_frames_to_h5\"]": "<dt class=\"sig sig-object mat\" id=\"write_frames_to_h5\">\n<span class=\"sig-name descname\"><span class=\"pre\">write_frames_to_h5</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">file</span></em>, <em class=\"sig-param\"><span class=\"pre\">Y_in</span></em>, <em class=\"sig-param\"><span class=\"pre\">varargin</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Write in-memory 3D or 4D data to an HDF5 file in chunks.</p><p>This function writes a multidimensional array <cite>Y_in</cite> to an HDF5 file specified\nby <cite>file</cite> in chunks. It creates a dataset within the HDF5 file and writes the\ndata in specified chunk sizes. If <cite>dataset_name</cite> is not provided, it defaults\nto \u2018/Y\u2019. If target_chunk_mb size is not provided, it defaults to 2000.</p><p class=\"rubric\">Notes</p><p>The function handles 3D or 4D arrays and writes them incrementally to the HDF5\nfile to manage memory usage efficiently. It also trims the last frame of each\nchunk if the chunk size exceeds the remaining data size.</p><p class=\"rubric\">Examples</p><p>Write a 3D array to an HDF5 file with default chunk size and dataset name:</p></dd>", "a[href=\"#read_h5_metadata\"]": "<dt class=\"sig sig-object mat\" id=\"read_h5_metadata\">\n<span class=\"sig-name descname\"><span class=\"pre\">read_h5_metadata</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">h5_fullfile</span></em>, <em class=\"sig-param\"><span class=\"pre\">loc</span></em><span class=\"sig-paren\">)</span></dt><dd><p>Reads metadata from an HDF5 file.</p><p>Reads the metadata attributes from a specified location within an HDF5 file\nand returns them as a structured array.</p><p class=\"rubric\">Notes</p><p>The function uses <cite>h5info</cite> to retrieve information about the specified location\nwithin the HDF5 file and <cite>h5readatt</cite> to read attribute values. The attribute names\nare converted to valid MATLAB field names using <cite>matlab.lang.makeValidName</cite>.</p><p class=\"rubric\">Examples</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
