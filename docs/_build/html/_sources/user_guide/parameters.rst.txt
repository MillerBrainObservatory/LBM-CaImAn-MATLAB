Parameters
##########

For the :ref:`core` functions** in this pipeline, the initial parameters are always the same.

.. note::

    The term "parameter" throughout this guide refers to the inputs to each function.
    For example, running "help convertScanImageTiffToVolume" in the command window will
    show to you and describe the parameters of that function.

These parameters primarily pertain to saving files, which the primary storage format for this
pipeline is HDF5. Note you can save HDF5 files as `.h5` or `.hdf5`.

You can choose to save your data in a few different ways:

- All in the same file, as different groups '/raw', '/extracted'. !!NOT RECOMMENDED!!
- Each step is saved to a different file.
- Any combination of the two (first two steps in the same file, second step in a separate file).

.. important::

   Deleting or overwriting data with a different size are not operations permitted in the h5 standard. Overwriting a file
   will consist of deleting the entire group and starting fresh.

Definitions
================

:code:`data_path` : A filepath leading to the directory that contains your .tiff files.

:code:`save_path` : A filepath leading to the directory where results are saved.

:code:`data_input_group` : If the input path is h5, this is the group containing the data.

:code:`data_output_group` : If the output file is h5, this is the group name where the data will be saved.

:code:`debug_flag` : Set to 1 to print all files / datasets that would be processed, then stop before any processing occurs.

:code:`overwrite` : Set to 1 to overwrite pre-existing data. Setting to 0 will simply return without processing that file.

:code:`num_cores` : Set to the number of CPU cores to use for parallel computing. Note that even though this is an option in pre-processing, there is actually no parallel computations during this step so the value will be ignored.


The recommended method for saving data is to save each step in a separate HDF5 file and name the group after the step being executed.
This is demonstrated in the :ref:`demo_LBM_pipeline` file:

.. code-block:: MATLAB

   >> help convertScanImageTiffToVolume

  convertScanImageTiffToVolume Convert ScanImage .tif files into a 4D volume.

  Convert raw `ScanImage`_ multi-roi .tif files from a single session
  into a single 4D volumetric time-series (x, y, z, t). It's designed to process files for the
  ScanImage Version: 2016 software.

  Parameters
  ----------
  data_path : char
      The directory containing the raw .tif files. Only raw .tif files from one
      session should be in the directory.
  save_path : char, optional
      The directory where processed files will be saved. It is created if it does
      not exist. Defaults to the data_path directory.
  group_path : string, optional
      Group path within the hdf5 file to save the extracted data. Default is
      '/extraction'.
  debug_flag : double, logical, optional
      If set to 1, the function displays the files in the command window and does
      not continue processing. Defaults to 0.
  num_cores : double, logical, optional
      Not yet implemented.
  overwrite : logical, optional
      Whether to overwrite existing files (default is 1).
  fix_scan_phase : logical, optional
      Whether to correct for bi-directional scan artifacts. (default is true).
  trim_pixels : double, optional
      Pixels to trim from left, right,top, bottom of each scanfield before
      horizontally concatenating the scanfields within an image. Default is
      [0 0 0 0].
  compression : double, optional
      Compression level for the file (default is 0).

  Notes
  -----
  The function adds necessary paths for ScanImage utilities and processes each .tif
  file found in the specified directory. It checks if the directory exists, handles
  multiple or single file scenarios, and can optionally report the directory's contents
  based on the debug_flag.

  Each file processed is logged, assembled into a 4D volume, and saved in a specified
  directory as a .mat file with accompanying metadata. The function also manages errors
  by cleaning up and providing detailed error messages if something goes wrong during
  processing.

  See also fileparts, addpath, genpath, isfolder, dir, fullfile, error, regexp, savefast

  .. _ScanImage: https://www.mbfbioscience.com/products/scanimage/


For information about the parameters unique to each function, see the :ref:`api` or the help documentation for that individual function.

