.. _pre_processing:

Pre-Processing
==============

Pre-processing LBM datasets consists of 3 main processes:

- 1 ) Reshaping vertically concatenated strips into horizontally concatenated strips and aligning adjacent strips.
- 2 ) Bi-Directional Scan Phase Correction
- 3 ) Peicewise motion-correction

If the user choses to split frames across multiple `.tiff` files, there will be multiple tiff files in ascending order
of an suffix appended to the filename: `_000N`, where n=number of files chosen by the user.

.. important::

    All output .tiff files for a single imaging session should be placed in the same directory.
    No other .tiff files should be in this directory. If this happens, an error will throw.

There are 2 primary functions for pre-processing,

.. note::

   For detailed documentation in your MATLAB editor, use:

   >> help FunctionName
   >> help convertScanImageTiffToVolume

.. _directory structure:

Directory Structure
===================

The following is an example of the directory hierarchy
used for the demo.

.. code-block:: text

    Parent
    ├── raw
    │   └── basename_00001_0001.tiff
    │   └── basename_00001_0002.tiff
    │   └── basename_00001_00NN.tiff
    ├── extraction
    │   └── basename.h5
    ├── registration
    │   └── shift_vectors_plane_N.h5
    └── segmentation
        └── caiman_output_plane_.h5

    .. where N = the number of [X, Y, Z] time-series (planes)

Following the recommendation described in :ref:`recommended_install` all necessary functions should already be on your
MATLAB path. If an error is encountered, such as:

.. code-block:: MATLAB

    Undefined function 'convertScanImageTiffToVolume' for input arguments of type 'char'.


This means the input is not on your MATLAB path. Add this to the top of the script you are running:

 .. code-block:: MATLAB

    [fpath, fname, ~] = fileparts(fullfile(mfilename('fullpath'))); % path to this script
    addpath(genpath(fullfile(fpath, 'core/')));

You can make sure all of the requirements for the package are in the path with the following:

 .. code-block:: MATLAB

    result = validateRequirements(); % make sure we have dependencies in accessible places
    if ischar(result)
        error(result);
    else
        disp('Proceeding with execution...');
    end

First, we set up our inputs/outputs.

You can chain the output of one function to the input of another. Note the path names match :ref:`Directory Structure`.

.. code-block:: MATLAB

    parentpath = 'C:\Users\RBO\Documents\data\bi_hemisphere\';
    raw_path = [ parentpath 'raw\'];
    extract_path = [ parentpath 'extracted2\'];
    mkdir(extract_path); mkdir(raw_path);

.. code-block:: MATLAB

    convertScanImageTiffToVolume(raw_path, extract_path, 0, 'fix_scan_phase', false);

Our data are now saved as a single hdf5 file separated by file and by plane. This storage format
makes it easy to motion correct each time-series individually. We will be processing small patches of the total image,
roughly 20um in parallel, so attempting to process multiple time-series will drastically slow down NormCorre.

The key parameter "fix_scan_phase" will use Bi-Directional phase correlations to determine the lateral shift
between each line (row) of each ROI.

2. Motion Correction:

- Motion correction relies on _`NoRMCorre` for piecewise-rigid motion correction resulting in shifts for each patch.
- The output is a 2D column vector [x, y] with shifts that allow you to reconstruct the motion-corrected movie with _`core.utils.translateFrames`.
- shifts(:,1) represent pixel-shifts in *x*
- shifts(:,2) represent pixel-shifts in *y*

.. code-block:: MATLAB

   >> help translateFrames

     translateFrames Translate image frames based on provided translation vectors.

      This function applies 2D translations to an image time series based on
      a series of translation vectors, one per frame. Each frame is translated
      independently, and the result is returned as a 3D stack of
      (Height x Width x num_frames) translated frames.

      Inputs:
        Y - A 3D time series of image frames (Height x Width x Number of Frames).
        t_shifts - An Nx2 matrix of translation vectors for each frame (N is the number of frames).

      Output:
        translatedFrames - A 3D array of translated image frames, same size and type as Y.

See `notebooks/MC_Exploration` for a walkthrough on analyzing motion-corrected videos.

Motion correction metrics are saved to your savepath.

.. code-block:: MATLAB

    mdata = get_metadata(fullfile(metapath, metaname));
    mdata.base_filename = "MH184_both_6mm_FOV_150_600um_depth_410mW_9min_no_stimuli_00001";

    mcpath = 'C:\Users\RBO\Documents\data\bi_hemisphere\registration';
    motionCorrectPlane(extract_path, 23, 1, 3);

Pre-processing2
---------------

The raw output of an ScanImage MROI acquisition is a `tiff` (or series of tiffs) with metadata attached to the `artist` tag where:

- Each ROI’s image is stacked one on top of the other vertically.

- Each plane is written before moving onto the next frame, e.g.:

- plane 1 timepoint 1, plane 2 timepoint 1, plane 3 timepoint 1, etc.

- Frames may be split across multiple files if this option is specified the ScanImage configuration.

- Dimensions: [MxNxZxF], Image size MxN for z planes, F frames,. Default type is uint16.

If the user choses to split frames across multiple `.tiff` files, there will be multiple tiff files in ascending order of an suffix appended to the filename: `_000N`, where n=number of files chosen by the user:

Single File:
- sessionX_00001.tiff

Multi File (<10):
- sessionX_00001_00001.tiff
- sessionX_00001_00002.tiff

Multi File (>=10):
- sessionX_00001_00001.tiff
- sessionX_00001_00002.tiff
- ...
- sessionX_00001_00010.tiff

Be careful to make sure that:

- Each session (series of .tiff files) should be in same directory.

- No other .tiff files should be in this directory. If this happens, an error will throw.

De-interleaving planes/frames is done via :code:`convertScanImageTiffToVolume`

| Run 'help <function>' in the command window for a detailed overview on function parameters, outputs and examples.

.. _convertScanImageTiffToVolume:

.. code-block:: MATLAB

   >> help convertScanImageTiffToVolume
     convertScanImageTiffToVolume Convert ScanImage .tif files into a 4D volume.

      Convert raw `ScanImage`_ multi-roi .tif files from a single session
      into a single 4D volume (x, y, z, t). It's designed to process files for the
      ScanImage Version: 2016 software.

      Parameters
      ----------
      filePath : char
          The directory containing the raw .tif files. Only raw .tif files from one
          session should be in the directory.
      saveDirPath : char, optional
          The directory where processed files will be saved. It is created if it does
          not exist. Defaults to the filePath if not provided.
      diagnosticFlag : double, logical, optional
          If set to 1, the function displays the files in the command window and does
          not continue processing. Defaults to 0.

      Notes
      -----
      The function adds necessary paths for ScanImage utilities and processes each .tif
      file found in the specified directory. It checks if the directory exists, handles
      multiple or single file scenarios, and can optionally report the directory's contents
      based on the diagnosticFlag.

      Each file processed is logged, assembled into a 4D volume, and saved in a specified
      directory as a .mat file with accompanying metadata. The function also manages errors
      by cleaning up and providing detailed error messages if something goes wrong during
      processing.

      Examples
      --------
      .. code-block:: MATLAB

            % Path to data, path to save data, diagnostic flag
            convertScanImageTiffToVolume('C:/data/session1/', 'C:/processed/', 0);
            convertScanImageTiffToVolume('C:/data/session1/', 'C:/processed/', 1); % just display files

      See also fileparts, addpath, genpath, isfolder, dir, fullfile, error, regexp, savefast

**Output**

- After successfully running `convertScanImageTiffToVolume`, there will be a series of `.mat` files matching the number of raw `.tiff` files.
- Each `.mat` contains the following fields:
    - Y: 4D (x,y,z,t) volume
    - metadata: struct of metadata retrieved through `get_metadata`

See `notebooks/Strip_Exploration` for a walkthrough on how ScanImage trims pixels and concatenates adjacent strips into a single image.


Motion-correction2
------------------

Perform both piecewise-rigid motion correction using `NormCORRe`_ to stabilize the imaging data. Each plane is motion corrected sequentially, so
only a single plane is ever loaded into memory due to large LBM filesizes (>35GB). A template of 150 frames is used to initialize a "reference image". This image is
your "ground truth" per-se, it is the image you want to most accurately represent the movement in your video.

For input, use the same directory as `savePath` parameter in `convertScanImageTiffToVolume`_.

.. code-block:: MATLAB

    >> help motionCorrectPlane
      motionCorrectPlane Perform rigid and non-rigid motion correction on imaging data.

      This function processes imaging data by sequentially loading individual
      processed planes, applying rigid motion correction to generate a template,
      followed by patched non-rigid motion correction. Each motion-corrected plane
      is saved separately with relevant shifts and metadata.

      Parameters
      ----------
      filePath : char
          Path to the directory containing the raw .tif files.
      numCores : double, integer, positive
          Number of cores to use for computation. The value is limited to a maximum
          of 24 cores. If more than 24, it defaults to 23.
      startPlane : double, integer, positive
          The starting plane index for processing.
      endPlane : double, integer, positive
          The ending plane index for processing. Must be greater than or equal to
          startPlane.

      Returns
      -------
      Each motion-corrected plane is saved as a .mat file containing the following:
      shifts : array
          2D motion vectors as single precision.
      metadata : struct
          Struct containing all relevant metadata for the session.

      Notes
      -----
      - Only .mat files containing processed volumes should be in the filePath.
      - Any .mat files with "plane" in the filename will be skipped to avoid
        re-processing a previously motion-corrected plane.

      See also addpath, gcp, dir, error, fullfile, fopen, regexp, contains, matfile, savefast
